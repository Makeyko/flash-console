#summary for v2.4
#labels Featured,Phase-Deploy,Phase-Implementation

=Getting started=

==Introduction==

  * The main class you need to use for console is `Cc`, (`com.junkbyte.console.Cc`).
  * `Cc` stands for Console controller which acts as singleton adapter for `Console` (`com.junkbyte.console.Console`). 

  * In a later date when you don't need console in your project, you can just remove `Cc.startOnStage(..)` from your code and the rest of console related codes will stop executing.

==Basics==

For easy reference, please see `samples/flash/Sample.as` for working sample.

Start console on stage... 
{{{
import com.junkbyte.console.Cc;
Cc.startOnStage(this, "");
}}}
  # First parameter is any DisplayObject which is already on stage or to be added.
  # If you want to set a keyword for console to start, assign at second parameter. 
   * You will need to type the keyword in correct sequence to show the console. 
   * Recommended keyword: ``` or ~ or debug. Use letters and numbers only. 
   * Console will start hidden if you set a password (you can set `Cc.visible = true;` to force display console). 
   * Entering the keyword while console is visible with hide it.

Logging...

{{{

Cc.log("Hello world.");
Cc.info("An info message.", "Optionally there", "can be", "multiple arguments.");
Cc.debug("A debug level log.");
Cc.warn("This is a warning log.");
Cc.error("This is an error log.");
Cc.fatal("This is a fatal error log with high visibility.", "You will get a short stack trace of where it's called from (configurable)");
//
// Basic channel logging
//
Cc.infoch("myChannel", "Hello myChannel.");
Cc.debugch("myChannel", "A debug level log.", "There is also Cc.errorch() and Cc.fatalch(). Skipping that for demo.");
// You can also use Cc.errorch() and Cc.fatalch().
//
// Instanced channel
//
var ch:ConsoleChannel = new ConsoleChannel('myCh');
ch.info("Hello!", "Works just like other logging methods but this way you keep the channel as an instance.");
//
// Stack tracing
//
Cc.stack("Stack trace called from...");
// It will add the stack trace under your string to show where this function is being called from.
}}}

===UI===

[http://www.junkbyte.com/flash-console/console_controls.png]

see: doc/console_controls.png

===Configuration===
Console start with minimal features so you will need to use `Cc.config` to fit your needs.
It is recommended to set them before starting console. 
Example:
{{{
Cc.config.commandLineAllowed = true // Enables full commandLine features
Cc.config.tracing = true; // also send traces to flash's normal trace()
Cc.config.maxLines = 5000; // change maximum log lines to 5000, default is 1000

Cc.startOnStage(this); // finally start with these config
}}}

Asdoc: http://junkbyte.com/flash-console/asdoc/com/junkbyte/console/ConsoleConfig.html

==Useful Features==

For easy reference, please see samples/flash/SampleAdvanced.as for working sample.

====Keyboard Binding====
  * Key binding lets you bind keyboard keys to your own function
  * Example usages: open a specific panel, give special items/cheats in a game
  * Key binding should only be used for development purposes
  * If triggering something by keyboard is part of the actual project behaviour, it is recommended you write your own to avoid depending on console
  * The function you pass get STRONG referenced
  * Example below logs "Hello!" in console when user press the key H in keyboard.
{{{
import com.junkbyte.console.Cc;
import com.junkbyte.console.KeyBind;
Cc.bindKey(new KeyBind("h"), Cc.log, ["Hello!"]);
}}}

====Command line====
  * CommandLine let you execute actionscript 3 code at run time
  * Command line appears at the bottom of main panel (press CL at top menu)
  * You must set `Cc.config.commandLineAllowed = true;` to be able to run full features.

  * You can *store references* for use in commandline
  * Cc.store() use weak reference by default but you can specify to be strong
{{{
//Example 1 (storing functions)
Cc.store("load", function(id:uint){Cc.log("Do some loading with id", id)});
//User call this function by typing '$load(123);' to load with id 123.
//
//Example 2 (storing anything)
Cc.store("stage", this.stage); // assuming there is this.stage
//User manipulate frame rate by typing '$stage.frameRate = 60'
}}}
  * You can go crazy with commandline. Example: `stage.getChildByName("Console").filters = new Array(new flash.filters.GlowFilter());` - adds glow filter on Console.
  * For full commandLine features, see CommandLineHelp
 
====Display Roller====
  * Display roller shows the display tree of objects under your mouse
  * Start Display roller by pressing RL at the top menu
  * You can capture the display map to console for use in commandLine
   * To do this, click on 'Capture key: *unassigned*' in the RL panel
   * Press C on keyboard to bind the capture key to that key
   * Roll over to anything you want to capture and press the keyboard C key
   * You will get the display map printed on console
   * Clicking on the name will set that display (Sprite/MovieClip etc) as commandLine's scope
   * NOTE: You can also use Cc.setRollerCaptureKey(...) to assign the capture key

====Graphing====
  * Graphing lets you view number graphs similar to the FPS and memory monitor. (F and M buttons on top menu)
  * Example as seen in samples/SampleAdvanced.as:
{{{
//Graph the current mouseX and mouseY values
Cc.addGraph("mouse", this, "mouseX", 0xff3333,"X", new Rectangle(380,180,80,80), true);
Cc.addGraph("mouse", this, "mouseY", 0x3333ff,"Y");
// Sine wave graph generated by commandline execution, very expensive way to graph but it works :)
Cc.addGraph("mouse", this, "(Math.sin(flash.utils.getTimer()/1000)*300)+300", 0x119911, "sine");
}}}

====Ruler tool====
  * Start ruler tool by pressing on RL at the top menu
  * Ruler tool let you measure the distance and angle between two points

====Advanced Logging====

Yes, lets go back to logging... here are some extra features:

  * Cc.explode is similar to JSON where it explodes an object's value to bits so that you can see all in one line
{{{
Cc.explode(stage);
// logs: {Stage quality:"HIGH", fullScreenWidth:1920, alpha:1, numChildren:2, width:700, height:303, etc...
}}}

Non-repetitive logging...
It will keep replacing the previous line with repeat turned on until certain count is passed.
For example, if you are tracing download progress and you don't want to flood console with it.
{{
Cc.add("My advanced log in priority 2, 1st call", 2, true);
Cc.add("My advanced log in priority 2, 2nd call", 2, true);
Cc.add("My advanced log in priority 2, 3rd call", 2, true);
Cc.add("My advanced log in priority 2, 4th call", 2, true);
Cc.add("My advanced log in priority 2, 5th call", 2, true);
// You will only see the last line in console.
// If you want to specify the channel, use:
// Use Cc.ch(channel:*, str:*, priority:int, isRepeating:Boolean)
}}}

====Garbage collection monitor====
{{{
import flash.display.Sprite;
var aSprite = new Sprite();
Cc.watch(aSprite, "aSprite");
aSprite = null;
}}}
Above example creates a Sprite and then remove its reference. This marks the Sprite to be garbage collected, but it might not get collected straight away.
If you have a debugger version of flash player installed, you can open memory monitor (press M in console menu) and then press G in that panel to force garbage collect. 
If you start using this in fairly big flash project, you will see that objects that have lost reference to will properly get collected and notified in console.


====Remoting====
  * Remoting sends log data for a remote console to use
  * The advantage is that you do not need to keep console open on your flash
  * You can use commandline, view FPS and memory from remote
  * SWF version of remote is in bin/consoleRemote.swf
  * AIR version of remote is in bin/ConsoleRemote.air
  * EXE and APP version can be published using samples/flash/ConsoleRemote.as
  * NOTE: There can be confusion with FPS and memory monitor if you have more than one flash client sending to remote
{{{
Cc.remoting = true; // turns on remoting
}}}

===Custom Style===
You *must* set them before starting console. Example:
{{{
Cc.config.style.big(); // BIGGER text.
Cc.config.style.whiteBase(); // Black on white. - NOT the way for stealth coders!
Cc.config.style.backgroundAlpha = 1; // opaque background.

Cc.startOnStage(this); // finally start with these styles
}}}

example: bin/sampleStyle.swf for demo. (src: samples/flash/SampleStyle.as).

Asdoc: http://junkbyte.com/flash-console/asdoc/com/junkbyte/console/ConsoleStyle.html