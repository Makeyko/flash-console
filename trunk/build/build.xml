<project name="Console" basedir="..">


	<property name="src.dir" value="${basedir}/src" />
	<property name="src.ver.file" value="${src.dir}/com/junkbyte/console/Console.as" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="asdoc.dir" value="${basedir}/asdoc" />
	<property name="bin.dir" value="${basedir}/bin" />
	<property name="doc.dir" value="${basedir}/doc" />
	<property name="samples.dir" value="${basedir}/samples" />
	<property name="wiki.dir" value="./../wiki" />
	<property name="temp.dir" value="${basedir}/temp" />
	
	<property file="${build.dir}/local.properties" />

	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
	<path id="svnant.classpath">
		<fileset dir="${svnant.path}">
			<include name="*.jar" />
		</fileset>
	</path>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.classpath" />

	<target name="BuildAll" description="Compile everything!" depends="updateVersion">
		<antcall target="swf">
			<param name="file" value="${samples.dir}/flash/SampleAdvanced.as" />
			<param name="output" value="${bin.dir}/sampleAdvanced.swf" />
			<param name="config" value="flex" />
		</antcall>
		<antcall target="swf">
			<param name="file" value="${samples.dir}/flash/SampleStyle.as" />
			<param name="output" value="${bin.dir}/sampleStyle.swf" />
			<param name="config" value="flex" />
		</antcall>
		<antcall target="swf">
			<param name="file" value="${samples.dir}/flash/ConsoleRemote.as" />
			<param name="output" value="${bin.dir}/consoleRemote.swf" />
			<param name="config" value="flex" />
		</antcall>
		<antcall target="packageAir" />
		<exec executable="${FLASH}">
			<arg line="'${build.dir}/exportswc.jsfl'" />
		</exec>
		<antcall target="compileASDoc" />
	</target>
	
	<target name="updateVersion">
		<propertyfile file="${build.dir}/build.properties">
			<entry key="build.number" type="int" operation="+" value="1" />
			<entry key="build.date" type="date" value="now"/>
		</propertyfile>
		<property file="${build.dir}/build.properties"/>
		<echo>"Version ${build.version}${build.stage}. build ${build.number} @ ${build.date}"</echo>
		<replaceregexp file="${src.ver.file}" match="(VERSION:Number\s*=\s*).+;" replace="\1${build.version};" />
		<replaceregexp file="${src.ver.file}" match="(VERSION_STAGE:String\s*=\s*).+;" replace='\1"${build.stage}";' />
		<replaceregexp file="${src.ver.file}" match="(BUILD:int\s*=\s*).+;" replace="\1${build.number};" />
		<replaceregexp file="${src.ver.file}" match="(BUILD_DATE:String\s*=\s*).+;" replace='\1"${build.date}";' />
	</target>

	<!-- Parameters: file, output, config -->
	<target name="swf">
		<echo message="Compiling SWF: ${file} to ${output}" />
		<mxmlc file="${file}" output="${output}" keep-generated-actionscript="false">
			<load-config filename="${FLEX_HOME}/frameworks/${config}-config.xml" />
			<source-path path-element="${FLEX_HOME}/frameworks" />
			<compiler.source-path path-element="${src.dir}" />
			<default-size width="640" height="480" />
		</mxmlc>
	</target>

	<!-- Parameters: class, output -->
	<target name="swc">
		<echo message="Compiling SWC: ${class} to ${output}" />
		<compc output="${output}" include-classes="${class}">
			<load-config filename="${FLEX_HOME}/frameworks/flex-config.xml" />
			<compiler.source-path path-element="${src.dir}" />
		</compc>
	</target>

	<target name="packageAir">
		<antcall target="swf">
			<param name="file" value="${samples.dir}/remote_air/ConsoleRemoteAIR.as" />
			<param name="output" value="${samples.dir}/remote_air/ConsoleRemoteAIR.swf" />
			<param name="config" value="air" />
		</antcall>
		<exec executable="${FLEX_HOME}/bin/adt.bat" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore build/ConsoleRemote.p12" />
			<arg line="-storepass ${AIR_CERT_PASS}" />
			<arg line="${bin.dir}/ConsoleRemote.air" />
			<arg line="${samples.dir}/remote_air/ConsoleRemoteAIR-app.xml" />
			<arg line="-C ${samples.dir}/remote_air ConsoleRemoteAIR.swf" />
			<arg line="-C ${doc.dir}/icons icon16.png" />
			<arg line="-C ${doc.dir}/icons icon32.png" />
			<arg line="-C ${doc.dir}/icons icon48.png" />
			<arg line="-C ${doc.dir}/icons icon128.png" />
		</exec>
	</target>

	<target name="zip" description="Package to ZIP">
		<property file="${build.dir}/build.properties"/>
		<echo>"Packaging to Zip. Make sure you have commited new files to SVN as it will only package versioned files."</echo>
		<delete dir="${temp.dir}" />
		<svn>
			<update dir="${basedir}" />
			<export srcPath="${basedir}" destPath="${temp.dir}" />
		</svn>
		<delete dir="${temp.dir}/build" />
		<zip destfile="console${build.version}${build.stage}.zip">
			<fileset dir="${temp.dir}" />
		</zip>
		<delete dir="${temp.dir}" />
	</target>

	<target name="copyTxtToWiki">
		<copy todir="${wiki.dir}" includeemptydirs="false">
			<fileset dir="${doc.dir}" />
			<mapper type="glob" from="*.txt" to="*.wiki" />
		</copy>
	</target>

	<target name="copyWikiToTxt">
		<copy todir="${doc.dir}" includeemptydirs="false">
			<fileset dir="${wiki.dir}" />
			<mapper type="glob" from="*.wiki" to="*.txt" />
		</copy>
	</target>


	<target name="compileASDoc">
		<delete dir="${asdoc.dir}" failOnError="false" includeEmptyDirs="true" />
		<mkdir dir="${asdoc.dir}" />
		<property file="${build.dir}/build.properties"/>
		<exec executable="${FLEX_HOME}/bin/asdoc.exe" failonerror="true">
			<arg line="-output '${asdoc.dir}'" />
			<arg line="-source-path '${src.dir}'" />
			<arg line="-doc-classes com.junkbyte.console.Cc com.junkbyte.console.Console com.junkbyte.console.ConsoleConfig com.junkbyte.console.ConsoleStyle com.junkbyte.console.ConsoleChannel com.junkbyte.console.KeyBind" />
			<arg line="-exclude-dependencies" />
			<arg line="-main-title 'Flash-Console v${build.version}'" />
			<arg line="-window-title 'Flash-Console v${build.version}'" />
			<arg line="-footer 'Flash-Console v${build.version}'" />
		</exec>
	</target>
</project>