/*
* 
* Copyright (c) 2008-2010 Lu Aye Oo
* 
* @author 		Lu Aye Oo
* 
* http://code.google.com/p/flash-console/
* 
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
* 
*/
package 
{
	import flash.ui.Keyboard;
	import com.junkbyte.console.Cc;
	import com.junkbyte.console.vos.Log;

	import flash.display.*;
	import flash.geom.Rectangle;
	import flash.utils.ByteArray;

	[SWF(width='700',height='300',backgroundColor='0xFFFFFF',frameRate='30')]
	// Might want to add compile argument: -use-network=false -debug=true
	
	public dynamic class SampleAdvanced extends MovieClip{
		
		private var temp:Object = {o1:{o11:{o111:{text:"Some randome text", number:123}, o12:[2,3,4,5]}}, o2:{o21:[]}};
		private var  ba:ByteArray;
		public function SampleAdvanced() {
			stage.scaleMode = StageScaleMode.NO_SCALE;
			//
			// SET UP - only required once
			//
			
			Cc.startOnStage(this, "`"); // "`" - change for password. This will start hidden
			Cc.visible = true; // show console, because having password hides console.
			Cc.commandLine = true; // enable command line
			//Cc.memoryMonitor = true;
			//Cc.fpsMonitor = true;
			//Cc.displayRoller = true;
			Cc.config.tracing = true;
			
			Cc.config.commandLineAllowed = true;
			Cc.width = 700;
			Cc.height = 300;
			Cc.remotingPassword = null; // Just so that remote don't ask for password
			Cc.remoting = true;
			
			Cc.addMenu("T1", Cc.log, ["Greetings 1"], "This is a test menu 1");
			Cc.addMenu("T<2>", Cc.log, ["Greetings 2"], "This is a test menu 2");
			//
			// End of setup
			//
			Cc.log("Lets try some object linking...");
			Cc.info("Here is a link to stage: ", stage);
			Cc.info("Here is a link to Cc class", Cc);
			Cc.info("Here is a link to Console instance", Cc.instance);
			
			Cc.log("___");
			var o:Log = new Log("test", "ch1", 5);
			o.prev = new Log("Previous log", "ch0", 1);
			// explode an object into its values..
			var arr:Array = ["a","b","c",temp, o];
			Cc.log("Going to Cc.explode() a junk of values below...");
			Cc.explode(arr);
			Cc.log("___");
			ba = new ByteArray();
			ba.writeUTF("HA!");
			ba.writeObject({test:"test", num:99});
			ba.writeObject(arr);
			ba.writeInt(10);
			ba.writeBoolean(true);
			ba.writeBoolean(false);
			ba.writeByte(1);
			ba.writeByte(0);
			ba.writeShort(10);
			ba.writeFloat(10.11111);
			ba.writeDouble(10.11111);
			
			Cc.info("Bytearry will now print properly rather than breaking the whole console.");
			Cc.info("A byteArray with UTF string:", ba);
			Cc.log("___");
			Cc.info("Try the new search highlighting... Type '/filter link' in commandline below.");
			//
			Cc.addSlashCommand("test", function():void{ Cc.log("Do the test!");} );
			Cc.addSlashCommand("test2", function(param:String):void{Cc.log("Do the test 2 with param string:", param);} );
			
			//
			//Graphing feature examples
			//Graph the current mouseX and mouseY values
			Cc.addGraph("mouse", this,"mouseX", 0xff3333,"X", new Rectangle(560,180,80,80), true);
			Cc.addGraph("mouse", this,"mouseY", 0x3333ff,"Y");
			// Sine wave graph generated by commandline execution, very expensive way to graph but it works :)
			Cc.addGraph("mouse", this,"(Math.sin(flash.utils.getTimer()/1000)*300)+300", 0x119911,"sine"); 
			
			//
			// Garbage collection monitor
			var aSprite:Sprite = new Sprite();
			Cc.watch(aSprite, "aSprite");
			aSprite = null;
			// it probably won't get garbage collected straight away,
			// but if you have debugger version of flash player installed,
			// you can open memory monitor (M) and then press G in that panel to force garbage collect
			// You will see "[C] GARBAGE COLLECTED 1 item(s): aSprite"
			
			// Test of Cc.stack,  If you have debugger version installed you will see a stack trace like:
			// HELLO
			//  @ SampleAdvanced/e()
			//  @ SampleAdvanced/d()
			//  @ SampleAdvanced/c()
			a(); // see function e() below
			
			
			Cc.addMenu("spam34k", spam, [34000]);
			Cc.addMenu("spam38k", spam, [38000]);
			Cc.addMenu("spam50k", spam, [50000]);
			Cc.addMenu("spam100k", spam, [100000]);
		}
		private function spam(chars:int):void{
			var str:String = "";
			while(str.length < chars){
				str += "12345678901234567890123456789012345678901234567890123456789012345678901234567890";
			}
			str = str.substring(0, chars);
			Cc.log(str);
			Cc.log("<<",chars,"chars.");
		}
		private function a():void{
			b();
		}
		private function b():void{
			c();
		}
		private function c():void{
			d();
		}
		private function d():void{
			e();
		}
		private function e():void{
			Cc.stack("Hello from stack trace.");
		}
	}
}
