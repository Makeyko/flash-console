/*
* 
* Copyright (c) 2008-2010 Lu Aye Oo
* 
* @author 		Lu Aye Oo
* 
* http://code.google.com/p/flash-console/
* 
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
* 
*/
package 
{
	import flash.ui.Keyboard;
	import com.junkbyte.console.KeyBind;
	import com.junkbyte.console.Cc;
	import com.junkbyte.console.ConsoleConfig;
	import com.junkbyte.console.vos.Log;

	import flash.display.*;
	import flash.utils.ByteArray;

	[SWF(width='700',height='300',backgroundColor='0xFFFFFF',frameRate='30')]
	// Might want to add compile argument: -use-network=false -debug=true
	
	public dynamic class SampleAdvanced extends MovieClip{
		
		private var temp:Object = {o1:{o11:{o111:{text:"Some randome text", number:123}, o12:[2,3,4,5]}}, o2:{o21:[]}};
		private var  ba:ByteArray;
		public function SampleAdvanced() {
			//
			stage.scaleMode = StageScaleMode.NO_SCALE;
			
			// SET UP - only required once
			//
			var config:ConsoleConfig = new ConsoleConfig(); // optional.
			//config.style.big(); // BIG text
			//config.style.whiteBase(); // Black on white
			
			Cc.startOnStage(this, "`", config); // "`" - change for password. This will start hidden
			Cc.visible = true; // show console, because having password hides console.
			Cc.commandLine = true; // enable command line
			//Cc.memoryMonitor = true;
			//Cc.fpsMonitor = true;
			//Cc.displayRoller = true;
			//Cc.setRollerCaptureKey("c");
			Cc.config.tracing = true;
			Cc.width = 700;
			Cc.height = 300;
			Cc.remotingPassword = null; // Just so that remote don't ask for password
			Cc.remoting = true;
			//
			// End of setup
			//
			//Cc.addSlashCommand("test", function():void{ Cc.log("Do the test!");} );
			//Cc.addSlashCommand("test2", function(param:String):void{Cc.log("Do the test 2 with param string:", param);} );
			
			// Make sure you have remote open as well so that you can see the changes you do also reflect on the other side.
			
			//
			//Add graph to show mouse X/Y positions
			//
			//Cc.addGraph("mouse", this,"mouseX", 0xff3333,"X", new Rectangle(400,225,80,80), true);
			//Cc.addGraph("mouse", this,"mouseY", 0x3333ff,"Y");
			//
			// Sine wave graph generated by commandline execution, very expensive way to graph but it works :)
			//Cc.addGraph("mouse", this,"(Math.sin(flash.utils.getTimer()/1000)*300)+300", 0x119911,"sine"); 
			
			//
			//
			// Garbage collection monitor
			// it probably won't get garbage collected straight away,
			// but if you have debugger version of flash player installed,
			// you can open memory monitor (M) and then press G in that panel to force garbage collect
			// You will see "[C] GARBAGE COLLECTED 1 item(s): aSprite"
			
			Cc.log("Welcome to Console v2.5 PREVIEW / ALPHA...");
			Cc.log("");
			Cc.log("Lets try some object linking...");
			Cc.info("Here is a link to stage: ", stage);
			Cc.info("Here is a link to Cc class", Cc);
			Cc.info("Here is a link to Console instance", Cc.instance);
			
			Cc.log("___");
			var o:Log = new Log("test", "ch1", 5);
			o.prev = new Log("Previous log", "ch0", 1);
			// explode an object into its values..
			var arr:Array = ["a","b","c",temp, o];
			Cc.log("Going to Cc.explode() a junk of values below...");
			Cc.explode(arr);
			
			Cc.log("___");
			ba = new ByteArray();
			ba.writeUTF("HA! You found the secret byte array string!");
			Cc.info("Bytearry will now print properly rather than breaking the whole console.");
			Cc.info("A byteArray with UTF string:", ba);
			Cc.log("You will have to read the byte array manually using commandline once you click the link tho...");
			Cc.log("So.. click on the ByteArray link above, click on 'set scope' near the bottom. then write in command line 'position=0; readUTF()'");

			Cc.log("___");
			Cc.info("Try the new search highlighting... Type '/filter link' in commandline below.");
		}
	}
}
