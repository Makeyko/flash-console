#labels Phase-Deploy,Featured,Phase-Implementation
#summary for v2.4

=Getting started=

==Introduction==

The main class you need to use for console is `Cc`, (`com.junkbyte.console.Cc`). `Cc` stands for Console controller which acts as a static / singleton adapter for `Console` (`com.junkbyte.console.Console`). 

In a later date when you don't need console in your flash project, you can just remove `Cc.startOnStage(..)` OR `Cc.start(..)` from your code and the rest of console related codes will stop executing to save memory and performance.


==Basics==

For easy reference, please see `samples/flash/Sample.as` for working sample.

Start console on stage... 
{{{
import com.junkbyte.console.Cc;
Cc.startOnStage(this, "");
}}}
  # First parameter is any DisplayObject which is already on stage or to be added.
  # If you want to set a keyword for console to start, assign at second parameter. You will need to type the keyword in correct sequence to show the console. Recommended keyword: ` or ~ or debug. Use letters and numbers only. Console will start hidden if you set a password (you can set `Cc.visible = true;` to force display console). Entering the keyword while console is visible with hide it.

Logging...

{{{

Cc.log("Hello world.");
Cc.info("An info message.", "Optionally there", "can be", "multiple arguments.");
Cc.debug("A debug level log.", "You can also pass an object and it'll become a link to inspect:", this);
Cc.warn("This is a warning log.", "Lets try the object linking again:", stage, " <- click it! (press 'exit' when done)");
Cc.error("This is an error log.", "This link might not work because it can get garbage collected:", new Sprite());
Cc.fatal("This is a fatal error log with high visibility.", "You will get a short stack trace of where it's called from (configurable)");
//
// Basic channel logging
//
Cc.infoch("myChannel", "Hello myChannel.");
Cc.debugch("myChannel", "A debug level log.", "There is also Cc.errorch() and Cc.fatalch(). Skipping that for demo.");
//
// Instanced channel
//
var ch:ConsoleChannel = new ConsoleChannel('myCh');
ch.info("Hello!", "Works just like other logging methods but this way you keep the channel as an instance.");

//
// Stack tracing
//
Cc.stack("Stack trace called from...");
// It will add the stack trace under your string to show where this function is being called from.
// Use Cc.stackch(...) to have channel name.
}}}

===UI===

[http://www.junkbyte.com/flash-console/console_controls.png]

see: doc/console_controls.png

===Configuration===
Console start with minimal features so you will need to use `Cc.config` to fit your needs.
It is recommended to set them before starting console. 
Example:
{{{
Cc.config.commandLineAllowed = true // Enables real commandLine features
Cc.config.tracing = true; // also send traces to flash's normal trace()
Cc.config.maxLines = 5000; // change maximum log lines to 5000, default is 1000

Cc.startOnStage(this); // finally start with these config
}}}

Asdoc: http://junkbyte.com/flash-console/asdoc/com/junkbyte/console/ConsoleConfig.html

===Custom Style===
You *must* set them before starting console. Example:
{{{
Cc.config.style.big(); // BIGGER text.
Cc.config.style.whiteBase(); // Black on white. - NOT the way for stealth coders!
Cc.config.style.backgroundAlpha = 1; // opaque background.

Cc.startOnStage(this); // finally start with these styles
}}}

example: bin/sampleStyle.swf for demo. (src: samples/flash/SampleStyle.as).

Asdoc: http://junkbyte.com/flash-console/asdoc/com/junkbyte/console/ConsoleStyle.html

==Useful Features==


====Keyboard Binding====

TODO:
Cc.bindKey


====Object inspection====

TODO:

====Command line====

TODO:
 slash commands
 storing commands and calling it.

  * Command line appears at the bottom of main panel (press CL).
  * Write `/help` in command line area for help.
  * Read CommandLineHelp for detailed info on how to take advantage of Command Line.


====Display Roller====

TODO:
 use capture key to capture back to log and get references for commandLine


====Graphing====

TODO:
 Similar to FPS and memory, you can supply your own property to graph.


====Advanced Logging====

Yes, lets go back to logging... here are some extra features:


TODO:
{{{
Cc.explode();
}}

Non-repetitive logging...
It will keep replacing the previous line with repeat turned on until a certain count is passed.
For example, if you are tracing download progress and you don't want to flood console with it.
{{
Cc.add("My advanced log in priority 2, 1st call", 2, true);
Cc.add("My advanced log in priority 2, 2nd call", 2, true);
Cc.add("My advanced log in priority 2, 3rd call", 2, true);
Cc.add("My advanced log in priority 2, 4th call", 2, true);
Cc.add("My advanced log in priority 2, 5th call", 2, true);
// You will only see the last line in console.
// If you want to specify the channel, use:
// Use Cc.ch(channel:*, str:*, priority:int, isRepeating:Boolean)
}}

====Garbage collection monitor====
{{{
import flash.display.Sprite;
var aSprite = new Sprite();
Cc.watch(aSprite, "aSprite");
aSprite = null;
}}}
Above example creates a Sprite and then remove its reference. This marks the Sprite to be garbage collected, but it might not get collected straight away.
If you have a debugger version of flash player installed, you can open memory monitor (press M in console menu) and then press G in that panel to force garbage collect. 
If you start using this in fairly big flash project, you will see that objects that have lost reference to will properly get collected and notified in console.


====Remoting====

 Cc.remoting.
use swf or the one online , or use the AIR file in download / svn.